
	EJERCICIOS BÁSICOS DE CLASES Y OBJETOS

1.	Diseña y codifica  una clase denominada TrianguloEquilátero teniendo en cuenta la información siguiente:
	Atributos:
•	Privado lado	Lado del Triángulo. (double)
	Métodos:	
•	Define dos constructores:
o	Un constructor con argumentos
o	Otro  por defecto.
•	setLado()		Permite asignar el lado.
•	getLado()		Retorna el lado.
•	getAltura()	Retorna la altura.
•	getArea()		Retorna el área.
•	getPerimetro() 	Retorna el perímetro.
•	toString()		Retorna los datos del triángulo, incluido área y perímetro

Crea un main que:
	Cree dos triángulos, pidiendo los datos por teclado.
	Visualice su lado, base, altura, área y perímetro con los métodos get y con toString
	Cambie el lado de uno de ellos y obtenga el nuevo área y perímetro.

2.	Crea una clase Articulo con la siguiente información:
	Atributos: 
•	Privado Código: int
•	Publico Nombre: String
•	Privado Color: String
•	Privado Precio: double
	Métodos:
•	Constructor que reciba los tres últimos atributos y cree el objeto. El código se debe generar de forma automática con autoincremento.
•	Constructor por defecto. El código se debe generar de forma automática con autoincremento.
•	Constructor que reciba el nombre y color  y cree el objeto. El código se debe generar de forma automática con autoincremento.
•	Métodos get() y set() para los atributos privados.
•	Método incrementarPrecio que pase como parámetro una cantidad que se sumará al precio del objeto.
•	Método rebajarPrecio que disminuya en un 10%  el precio del objeto
•	Método toString() para visualizar los datos del artículo.
	Crea un main para:
•	Crear tres artículos, cada uno con un constructor (para los constructores con parámetros se pedirán los datos necesarios por teclado).
•	En el artículo2, usar los métodos necesarios para dar valores a los atributos.
•	En el objeto articulo3, usar el método necesario para poner el precio al artículo.
•	En el artículo 1 cambiar el nombre y el color.
•	Visualizar los datos de los artículos.
•	Incrementar el precio del artículo2 (el incremento se pedirá por teclado).
•	Rebajar el precio del artículo1.
•	Visualizar los datos de los artículos después de los cambios de precio.

3.	Implementa la clase Posicion que representa un punto (x,y) en el eje de coordenadas:
	Cada posición viene definida por dos valores enteros x e y. Implementa los siguientes métodos:
	Constructor por defecto, que se corresponde con la posición (0,0).
	Constructor al que se pasan, como parámetros los valores iniciales x e y.
	Constructor de copia, al que se le pasa un objeto de tipo posición e inicializa el objeto con los valores x e y del objeto pasado como parámetro.
	Método setXY, que sustituye los valores x e y por los valores enteros que se le pasan como parámetros.
	Método getX y getY que muestran respectivamente la coordenada X e Y del punto.
	Método getXY, que muestra las coordenadas de un objeto Posicion en el formato (x, y).
	Método decXY, que decrementa el valor de las coordenadas x e y con los valores enteros pasados como parámetros.
	Método incXY, que incrementa el valor de las coordenadas x e y con los valores enteros pasados como parámetros.
	Método recta, que recibe como parámetro un objeto de tipo Posicion y calcula y muestra la ecuación de la recta que pasa por los puntos representados por el objeto que forma parte de la llamada y el que se pasa como parámetro. Sabiendo que la ecuación que pasa por dos puntos, (x1, y1) y (x2, y2) es:
y-y1 = m(x-x1) 
Siendo m la pendiente de la recta que se calcula con la siguiente fórmula:
m = (y2-y1) / (x2-x1)
	Método opuestoXY, que devuelva un objeto Posicion cuyas coordenadas x e y sean las opuestas a las coordenadas x e y del objeto que forma parte de la llamada.
	Genera un main que cree dos puntos, los visualice, obtenga sus opuestos, los incremente  con un valor introducido por teclado y calcule la recta que pasa por ambos.


4.	En una biblioteca se utilizan las siguientes clases:
	Autor: 
•	Atributos (privados):
o	Nombre: String
o	Nacionalidad: String
o	Año nacimiento: int
o	Año defunción: int
•	Métodos:
o	Constructor con los tres primeros parámetros.
o	Métodos get() para los cuatros atributos y set() para los tres primeros
o	Método fallecer  que pase como parámetro un año y lo ponga como año de defunción del autor.
o	Método toString()
	Libros: 
•	Atributos (privados):
o	ISBN: String
o	Titulo: String
o	Prestado: boolean
o	Autor: objeto de clase Autor
•	Métodos:
o	Constructor (el libro estará sin prestar)
o	Métodos get() y set() 
o	Método prestarLibro(): si el libro está prestado, obtiene un mensaje indicando  que no puede prestarlo; en caso contrario, lo marca no disponible.
o	Método devolverLibro(): si el libro no está prestado, obtiene un mensaje indicándolo; en caso contrario, lo marca disponible. .
	Se pide crear un main para:
•	Crear dos autores y visualizarlos
•	Crear dos libros y visualizarlos. Respecto al autor del libro, se obtendrán sus datos.
•	Prestar el  primer libro. Visualizar sus datos. Volver a prestarlo y observar el resultado.
•	Devolver el primer libro. Visualizar sus datos. Volver a devolverlo y observar el resultado.


4.	Rectángulo: para trabajar con rectángulos se usan las siguientes clases:

	Una clase Punto:
•	La clase tiene dos atributos que son las coordenadas x, y de tipo double.
•	Crea el constructor,  y los métodos get y set correspondientes.
•	Crea un método distancia() que recibe como parámetro otro punto y devuelve  la distancia entre el punto desde el cual se invoca al método y el punto que se pasa como parámetro. La fórmula de la distancia es:
 		distancia= ( (x-x1)2 + (y-y1)2 ) 1/2
•	Crea un método desplazar() que recibe dos valores double a y b y suma a la coordenada x el valor de a, y a la coordenada y el de b.

	Una clase Rectangulo:
•	La clase tiene dos atributos de tipo Punto que representan la esquina inferior izquierda y la esquina superior derecha del rectángulo.
•	Crear un constructor por defecto que ponga la esquina izquierda en el punto (0,0) y la derecha en el (1,1).
•	Crear un constructor que reciba como parámetros dos puntos que serán las esquinas.
•	Crear un constructor que reciba como parámetros un  punto (que se considerará la esquina izquierda)  y dos valores ancho y alto y construya la esquina derecha desplazando la izquierda lo que indiquen dichos valores.
•	Crear un método que visualice el rectángulo indicando sus esquinas.
•	Crear un método que obtenga la base del rectángulo.
•	Crear un método que obtenga la altura del rectángulo.
•	Crea un método que obtenga el área.
•	Crear un método que obtenga el perímetro.
	Crear un main que:
•	Cree tres puntos según los distintos constructores que se han definido y calcule las distancias entre ellos.
•	Cree un rectángulo pasándole dos de los puntos creados como parámetros y calcule su base, altura, perímetro y área.

5.	Partido de tenis

Se pretende desarrollar una aplicación en Java que simule, de una forma simplificada, un partido de tenis entre dos jugadores:

1)	Construir la clase Jugador cuyas instancias (objetos) representen jugadores de tenis con su puntuación en el ranking de la ATP

Esta clase deberá disponer de:

o	Un constructor con dos argumentos: el nombre del jugador y su puntuación en el ranking. Los atributos serán privados.
o	Métodos para consultar el nombre y la puntuación.
o	Un método para modificar la puntuación
o	El método toString.

1)	Construir una clase Partido, cuyos objetos tendrá como atributos privados  dos jugadores participantes y el ganador del partido.

Esta clase deberá disponer de:

o	Un constructor con dos argumentos de tipo Jugador que genere un partido sin jugar. El ganador estará a null.
o	Métodos de consulta a cada uno de los jugadores del partido (get)
o	Un método ganador(), que  genere el ganador de forma aleatoria, dándole a cada jugador una puntuación (emplear Math.random para generar números aleatorios). El jugador con mayor puntuación en la ATP tendrá mayor posibilidad de ganar. 

Una  forma de generar el ganador puede ser:
	…
resultado1= Math.random() * puntos_jugador1;
resultado2= Math.random() * puntos_jugador2;
<< el que tenga mayor resultado ganará el partido>>
			
Hay que tener en cuenta que el resultado puede ser empate, en este caso, se volverán a generar resultados hasta que exista un ganador. (Tened cuidado con la visibilidad de los atributos)

o	Un método jugar() que invoque al método anterior para obtener el nombre del ganador y sume 1 a su puntuación en el ranking.
3)
Construir la clase TestPartido que cree dos jugadores y un partido. Visualizar los datos de los jugadores (incluidas sus puntuaciones). Jugar el partido e indicar el nombre del ganador. Mostrar por pantalla las nuevas puntuaciones en el ranking de cada jugador. 






